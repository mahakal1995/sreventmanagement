<?php
/**
 * OrangeHRM is a comprehensive Human Resource Management (HRM) System that captures
 * all the essential functionalities required for any enterprise.
 * Copyright (C) 2006 OrangeHRM Inc., http://www.orangehrm.com
 *
 * OrangeHRM is free software; you can redistribute it and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * OrangeHRM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program;
 * if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA  02110-1301, USA
 *
 */

// Call ProjectDiuTest::main() if this source file is executed directly.
if (!defined("PHPUnit_MAIN_METHOD")) {
    define("PHPUnit_MAIN_METHOD", "ProjectDiuTest::main");
}

require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";

require_once "testConf.php";
require_once ROOT_PATH."/lib/confs/Conf.php";
require_once ROOT_PATH."/lib/models/eimadmin/ProjectDiu.php";
require_once ROOT_PATH."/lib/common/UniqueIDGenerator.php";

/**
 * Test class for ProjectDiu.
 * Generated by PHPUnit_Util_Skeleton on 2007-07-07 at 17:44:48.
 */
class ProjectDiuTest extends PHPUnit_Framework_TestCase {

    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main() {
        require_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new PHPUnit_Framework_TestSuite("ProjectDiuTest");
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, making sure table is empty and creating database
     * entries needed during test.
     *
     * @access protected
     */
    protected function setUp() {

    	$conf = new Conf();
    	$this->connection = mysql_connect($conf->dbhost.":".$conf->dbport, $conf->dbuser, $conf->dbpass);
        mysql_select_db($conf->dbname);

		// NOTE: TRUNCATE TABLE resets AUTO_INCREMENT values and starts counting from the beginning.
		mysql_query("TRUNCATE TABLE `ohrm_customer`", $this->connection);
		mysql_query("TRUNCATE TABLE `ohrm_project`", $this->connection);
        mysql_query("TRUNCATE TABLE `ohrm_project_diu`", $this->connection);

		// Insert a project and customer for use in the test
        mysql_query("INSERT INTO ohrm_customer(customer_id, name, description, is_deleted) VALUES(1, 'Test customer', 'description', 0)");
        mysql_query("INSERT INTO ohrm_customer(customer_id, name, description, is_deleted) VALUES(0, 'Internal customer', 'description', 0)");
        mysql_query("INSERT INTO ohrm_project(project_id, customer_id, name, description, is_deleted) VALUES(0, 0, 'Internal project', 'Internal project', 0)");
        mysql_query("INSERT INTO ohrm_project(project_id, customer_id, name, description, is_deleted) VALUES(1, 1, 'Test project 1', 'a test proj 1', 0)");
        mysql_query("INSERT INTO ohrm_project(project_id, customer_id, name, description, is_deleted) VALUES(2, 1, 'Test project 2', 'a test proj 2', 0)");
        
		UniqueIDGenerator::getInstance()->resetIDs();
    }

    /**
     * Tears down the fixture, removed database entries created during test.
     *
     * @access protected
     */
    protected function tearDown() {
		mysql_query("TRUNCATE TABLE `ohrm_project`", $this->connection);
        mysql_query("TRUNCATE TABLE `ohrm_project_diu`", $this->connection);
		mysql_query("TRUNCATE TABLE `ohrm_customer`", $this->connection);
		UniqueIDGenerator::getInstance()->resetIDs();
    }

    /**
     * Tests the ProjectDiu constructor
     */
    public function testNew() {

		$diu = new ProjectDiu();
		$this->assertNull($diu->getId(), "DU Id should be null");
		$this->assertNull($diu->getName(), "Name should be null");
		$this->assertNull($diu->getProjectId(), "Project Id should be null");
		$this->assertFalse($diu->isDeleted(), "DU was created in deleted state");

		$diu = new ProjectDiu(21);
		$this->assertEquals(21, $diu->getId(), "DU Id not set in constructor");
		$this->assertNull($diu->getName(), "Name should be null");
		$this->assertNull($diu->getProjectId(), "Project Id should be null");
		$this->assertFalse($diu->isDeleted(), "DU was created in deleted state");
    }

    /**
     * Tests the save() method.
     */
    public function testSave() {

		// Test that saving an diu without a project ID or a name is not allowed.
		$diu = new ProjectDiu();
		try {
			$diu->save();
			$this->fail("Exception not thrown");
		} catch (ProjectDiuException $e) {
			$this->assertEquals(0, $this->_getNumDiues(), "No rows should be inserted");
		}

		// Test that saving an Diu without a project ID is not allowed.
		$diu = new ProjectDiu();
		$diu->setName("Test Project DU");
		try {
			$diu->save();
			$this->fail("Exception not thrown");
		} catch (ProjectDiuException $e) {
			$this->assertEquals(0, $this->_getNumDiues(), "No rows should be inserted");
		}

		// Test that saving an diu without a name is not allowed.
		$diu = new ProjectDiu();
		$diu->setProjectId(1);
		try {
			$diu->save();
			$this->fail("Exception not thrown");
		} catch (ProjectDiuException $e) {
			$this->assertEquals(0, $this->_getNumDiues(), "No rows should be inserted");
		}

		// Save a valid new Diu
		$diu1Id = UniqueIDGenerator::getInstance()->getLastId("ohrm_project_diu", "diu_id") + 1;

		$diu1 = new ProjectDiu();
		$diu1->setProjectId(1);
		$diu1->setName("Development");
		$diu1->save();

		$this->assertEquals($diu1Id, $diu1->getId(), "DU ID not updated with auto_increment value");

		$result = mysql_query("SELECT * FROM ohrm_project_diu");
		$this->assertEquals(1, mysql_num_rows($result), "Only one row should be inserted");
		$row = mysql_fetch_assoc($result);
		$this->_checkRow($diu1, $row);

		// Save a second diu.
		$diu2Id = UniqueIDGenerator::getInstance()->getLastId("ohrm_project_diu", "diu_id") + 1;

		$diu2 = new ProjectDiu();
		$diu2->setProjectId(1);
		$diu2->setName("QA Testing");
		$diu2->save();

		$this->assertEquals($diu2Id, $diu2->getId(), "DU ID not updated with auto_increment value");

		$result = mysql_query("SELECT * FROM ohrm_project_diu ORDER BY diu_id ASC");
		$this->assertEquals(2, mysql_num_rows($result), "Only one row should be inserted");

		// check both rows
		$this->_checkRow($diu1, mysql_fetch_assoc($result));
		$this->_checkRow($diu2, mysql_fetch_assoc($result));

		// Change attributes and save diu using existing object
		$diu1->setName("Updated DU");
		$diu1->setProjectId(2);
		$diu1->save();
		$this->assertEquals($diu1Id, $diu1->getId(), "DU ID should not change");

		$result = mysql_query("SELECT * FROM ohrm_project_diu WHERE diu_id = $diu1Id");
		$this->_checkRow($diu1, mysql_fetch_assoc($result));

		// Change attributes and save diu using new object
		$diu3 = new ProjectDiu($diu2Id);
		$diu3->setProjectId(1);
		$diu3->setName("Installing");
		$diu3->save();

		$result = mysql_query("SELECT * FROM ohrm_project_diu WHERE diu_id = $diu2Id");
		$this->_checkRow($diu3, mysql_fetch_assoc($result));

		// Verify that saving an diu without changes does not throw an exception
		try {
			$diu3->save();
		} catch (ProjectDiuException $e) {
			$this->fail("Saving without changes should not throw an exception");
		}

		// Verify that setting name to null and saving throws an exception
		$diu1->setName(null);
		try {
			$diu1->save();
			$this->fail("Exception not thrown");
		} catch (ProjectDiuException $e) {
			// expected
		}

		// Save an diu for the project 0
		$diu3Id = UniqueIDGenerator::getInstance()->getLastId("ohrm_project_diu", "diu_id") + 1;

		$diu3 = new ProjectDiu();
		$diu3->setProjectId(0);
		$diu3->setName("Test internal");
		$diu3->save();

		$this->assertEquals($diu3Id, $diu3->getId(), "DU ID not updated with auto_increment value");

		$result = mysql_query("SELECT * FROM ohrm_project_diu WHERE diu_id = $diu3Id");
		$this->_checkRow($diu3, mysql_fetch_assoc($result));
    }

    /**
     * Test testGetdiuList() method.
     */
    public function testGetDiuList() {

		// Verify that invalid project ids throw exceptions
		try {
                    ProjectDiu::getDiuList("");
			$this->fail("Exception not thrown");
		} catch (ProjectDiuException $e) {
			// Expected
		}

		// Verify that invalid project ids throw exceptions
		try {
			ProjectDiu::getDiuList("xfe");
			$this->fail("Exception not thrown");
		} catch (ProjectDiuException $e) {
			// Expected
		}

		// Verify that invalid project ids throw exceptions
		try {
			ProjectDiu::getDiuList(null);
			$this->fail("Exception not thrown");
		} catch (ProjectDiuException $e) {
			// Expected
		}

		// Test with empty table
		$projId = 1;
		$list = ProjectDiu::getDiuList($projId);
		$this->assertType("array", $list);
		$this->assertEquals(0, count($list), "List should be empty");

		$list = ProjectDiu::getDiuList($projId, true);
		$this->assertType("array", $list);
		$this->assertEquals(0, count($list), "List should be empty");

		// create some Diues
		$actList = $this->_getTestDiues();
		$this->_createActivites($actList);

		// query
		$projId = 1;
		$list = ProjectDiu::getDiuList($projId);
		$this->assertType("array", $list);
		$this->assertEquals(2, count($list), "2 diues should be returned.");

		foreach ($list as $diu) {
			$this->assertTrue($diu instanceof ProjectDiu, "Should return ProjectAiu objects");

			$id = $diu->getId();
			$this->assertEquals($actList[$id], $diu);
			$this->assertFalse($diu->isDeleted(), "Should not be deleted");
			$this->assertEquals($projId, $diu->getProjectId(), "Project ID not correct");
		}

		// query including deleted
		$projId = 1;
		$list = ProjectDiu::getDiuList($projId, true);
		$this->assertType("array", $list);
		$this->assertEquals(3, count($list), "3 diues should be returned.");

		foreach ($list as $diu) {
			$this->assertTrue($diu instanceof ProjectDiu, "Should return ProjectDiu objects");

			$id = $diu->getId();
			$this->assertEquals($actList[$id], $diu);
			$this->assertEquals($projId, $diu->getProjectId(), "Project ID not correct");
		}
    }

    /**
     * Tests getdiu() method
     */
    public function testGetDiu() {

		// Verify that invalid project ids throw exceptions
		try {
			ProjectDiu::getDiu("");
			$this->fail("Exception not thrown");
		} catch (ProjectDiuException $e) {
			// Expected
		}

		// Verify that invalid project ids throw exceptions
		try {
			ProjectDiu::getDiu("xfe");
			$this->fail("Exception not thrown");
		} catch (ProjectDiuException $e) {
			// Expected
		}

		// Verify that invalid project ids throw exceptions
		try {
			ProjectDiu::getDiu(null);
			$this->fail("Exception not thrown");
		} catch (ProjectDiuException $e) {
			// Expected
		}

    	// non existant Diu id.
    	$obj = ProjectDiu::getDiu(1);
    	$this->assertNull($obj);

		// create some Diues
		$actList = $this->_getTestDiues();
		$this->_createActivites($actList);

    	$obj = ProjectDiu::getDiu(2);
    	$this->assertNotNull($obj);
    	$this->assertTrue($obj instanceof ProjectDiu);
    	$this->assertEquals($actList[$obj->getId()], $obj);

		// verify that deleted activites are returned as well
    	$obj = ProjectDiu::getDiu(3);
    	$this->assertNotNull($obj);
    	$this->assertTrue($obj instanceof ProjectDiu);
    	$this->assertTrue($obj->isDeleted());
    	$this->assertEquals($actList[$obj->getId()], $obj);

    	// non existant Diu id (with entries in table)
    	$obj = ProjectDiu::getDiu(5);
    	$this->assertNull($obj);

    }

    /**
     * test testgetDiuesWithName() method.
     */
    public function testGetDiuesWithName() {

		// Verify that invalid project ids throw exceptions
		try {
			ProjectDiu::getDiuesWithName("", "Test");
			$this->fail("Exception not thrown");
		} catch (ProjectDiuException $e) {
			// Expected
		}

		// Verify that invalid project ids throw exceptions
		try {
			ProjectDiu::getDiuesWithName("xafd", "Test");
			$this->fail("Exception not thrown");
		} catch (ProjectDiuException $e) {
			// Expected
		}

		// Verify that invalid project ids throw exceptions
		try {
			ProjectDiu::getDiuesWithName(null, "Test");
			$this->fail("Exception not thrown");
		} catch (ProjectDiuException $e) {
			// Expected
		}

		// Test that Diu name is escaped to avoid sql injection.
		// If not, following will throw an error.
		ProjectDiu::getDiuesWithName(1, "' WHERE xkaf in (SELECT * from xaf)");

    	// non existent name (with empty table)
    	$list = ProjectDiu::getDiuesWithName(1, "Test DU");
    	$this->assertEquals(0, count($list));

		// create some Diues
		$actList = $this->_getTestDiues();
		$this->_createActivites($actList);

    	// non existent name
    	$list = ProjectDiu::getDiuesWithName(1, "Test DU 2");
    	$this->assertEquals(0, count($list));

		// valid name
    	$list = ProjectDiu::getDiuesWithName(1, "test 1");
    	$this->assertEquals(1, count($list));
    	$obj = $list[0];
    	$this->assertEquals($actList[$obj->getId()], $obj);

		// verify that deleted Diues are not included by default
    	$list = ProjectDiu::getDiuesWithName(1, "test 3");
    	$this->assertEquals(0, count($list));

		// include deleted Diues
    	$list = ProjectDiu::getDiuesWithName(1, "test 3", true);
    	$this->assertEquals(1, count($list));
    	$obj = $list[0];
    	$this->assertEquals($actList[$obj->getId()], $obj);

		// multiple matches
		mysql_query("UPDATE ohrm_project_diu SET name = 'test name' where project_id = 1");
    	$list = ProjectDiu::getDiuesWithName(1, "test name");
    	$this->assertEquals(2, count($list));

    	$list = ProjectDiu::getDiuesWithName(1, "test name", true);
    	$this->assertEquals(3, count($list));
    }

	/**
	 * Tests the deleteDiues() method.
	 */
	public function testDeleteDiues() {

		$projId = 1;
		$ids = array(1, 2, 3, 4);

		// Verify that invalid project ids throw exceptions
		try {
			ProjectDiu::deleteDiues($ids, "Test");
			$this->fail("Exception not thrown");
		} catch (ProjectDiuException $e) {
			// Expected
		}

		// Verify that invalid project ids throw exceptions
		try {
			ProjectDiu::deleteDiues($ids, "");
			$this->fail("Exception not thrown");
		} catch (ProjectDiuException $e) {
			// Expected
		}

		// Verify that invalid diu ids throw exceptions
		try {
			ProjectDiu::deleteDiues(null, 1);
			$this->fail("Exception not thrown");
		} catch (ProjectDiuException $e) {
			// Expected
		}

		// Verify that invalid diu ids throw exceptions
		try {
			ProjectDiu::deleteDiues(array(1, ""), 1);
			$this->fail("Exception not thrown");
		} catch (ProjectDiuException $e) {
			// Expected
		}

		// Verify that invalid diu ids throw exceptions
		try {
			ProjectDiu::deleteDiues(array(1, "ew"), 1);
			$this->fail("Exception not thrown");
		} catch (ProjectDiuException $e) {
			// Expected
		}

		// try deleting unavailable ids.
		$numDeleted = ProjectDiu::deleteDiues($ids, $projId);
		$this->assertEquals(0, $numDeleted);

		$numDeleted = ProjectDiu::deleteDiues($ids);
		$this->assertEquals(0, $numDeleted);

		// create some activites
		$actList = $this->_getTestDiues();
		$this->_createActivites($actList);
		mysql_query("UPDATE ohrm_project_diu SET is_deleted = 0");

		// delete one and check
		$ids = array(1);
		$numDeleted = ProjectDiu::deleteDiues($ids);
		$this->assertEquals(1, $numDeleted);

		$num = $this->_getNumDiues("diu_id = 1 AND deleted = 1");
		$this->assertEquals(1, $num);

		$num = $this->_getNumDiues("deleted = 1");
		$this->assertEquals(1, $num);
		$num = $this->_getNumDiues("deleted = 0");
		$this->assertEquals(3, $num);

		// delete already deleted diu, verify no change
		$numDeleted = ProjectDiu::deleteDiues($ids);
		$this->assertEquals(0, $numDeleted);

		$num = $this->_getNumDiues("diu_id = 1 AND deleted = 1");
		$this->assertEquals(1, $num);
		$num = $this->_getNumDiues("deleted = 1");
		$this->assertEquals(1, $num);

		mysql_query("UPDATE ohrm_project_diu SET is_deleted = 0");

		// verify that only activies in given project are deleted.
		// NOTE: 1,2,3 belong to projId 1, 4 to projId 2
		$projId = 2;
		$ids = array(1, 2, 3);
		$numDeleted = ProjectDiu::deleteDiues($ids, $projId);
		$this->assertEquals(0, $numDeleted);

		$num = $this->_getNumDiues("deleted = 1");
		$this->assertEquals(0, $num);

		$ids = array(1, 2, 3, 4);
		$numDeleted = ProjectDiu::deleteDiues($ids, $projId);
		$this->assertEquals(1, $numDeleted);

		$num = $this->_getNumDiues("deleted = 1");
		$this->assertEquals(1, $num);

		$num = $this->_getNumDiues("diu_id = 4 AND deleted = 1");
		$this->assertEquals(1, $num);

		// delete multiple Diues
		$ids = array(1, 2, 3);
		$numDeleted = ProjectDiu::deleteDiues($ids);
		$this->assertEquals(3, $numDeleted);

		$num = $this->_getNumDiues("deleted = 1");
		$this->assertEquals(4, $num);
	}

    /**
     * Returns the number of rows in the project_diu table
     *
     * @param  string $where where clause
     * @return int number of rows
     */
    private function _getNumDiues($where = null) {

    	$sql = "SELECT COUNT(*) FROM ohrm_project_diu";
    	if (!empty($where)) {
    		$sql .= " WHERE " . $where;
    	}
		$result = mysql_query($sql);
		$row = mysql_fetch_array($result, MYSQL_NUM);
        $count = $row[0];
		return $count;
    }

    /**
     * Checks that the attributes of the diu object and the database row match.
     *
     * @param ProjectDiu $diu
     * @param array           $row
     */
    private function _checkRow($diu, $row) {
		$this->assertEquals($diu->getName(), $row['name'], "DU name not correct");
		$this->assertEquals($diu->getProjectId(), $row['project_id'], "Project id wrong");
		$this->assertEquals($diu->getId(), $row['diu_id'], "DU id wrong");
		$this->assertEquals($diu->isDeleted(), (bool)$row['deleted'], "Deleted value wrong");
    }

    /**
     * Creates some ProjectDiu objects for use in the tests
     * @return array Array of ProjectDiu objects
     */
    private function _getTestDiues() {
		$diues['1'] = $this->_getDiuObject(1, 1, "test 1", false);
		$diues['2'] = $this->_getDiuObject(2, 1, "test 2", false);
		$diues['3'] = $this->_getDiuObject(3, 1, "test 3", true);
		$diues['4'] = $this->_getDiuObject(4, 2, "test 4", false);
		return $diues;
    }

    /**
     * Create a ProjectDiu object with the passed parameters
     */
    private function _getDiuObject($diu_id, $project_id, $name, $deleted) {
    	$diu = new ProjectDiu($diu_id);
    	$diu->setProjectId($project_id);
    	$diu->setName($name);
    	$diu->setDeleted($deleted);
    	return $diu;
    }

    /**
     * Saves the given Project Diu objects in the databas
     *
     * @param ProjectDiu $diues ProjectDiu objects to save.
     */
    private function _createDiues($diues) {
		foreach ($diues as $diu) {
			$sql = sprintf("INSERT INTO ohrm_project_diu(diu_id, project_id, name, is_deleted) " .
                           "VALUES(%d, %d, '%s', %d)",
                           $diu->getId(), $diu->getProjectId(), $diu->getName(),
                           ($diu->isDeleted() ? 1 : 0));
            mysql_query($sql);
			UniqueIDGenerator::getInstance()->initTable();
		}
    }
}

// Call ProjectDiuTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == "ProjectDiuTest::main") {
    ProjectDiuTest::main();
}
?>
 